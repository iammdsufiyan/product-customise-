// Optimized Prisma schema with performance improvements
// This is your Prisma schema file with performance optimizations

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:dev.db"
}

model Session {
  id          String    @id
  shop        String
  state       String
  isOnline    Boolean   @default(false)
  scope       String?
  expires     DateTime?
  accessToken String
  userId      BigInt?
  firstName   String?
  lastName    String?
  email       String?
  accountOwner Boolean  @default(false)
  locale      String?
  collaborator Boolean? @default(false)
  emailVerified Boolean? @default(false)

  // Add index for frequently queried shop field
  @@index([shop])
}

model OptionSet {
  id          String   @id @default(cuid())
  name        String
  description String?
  fields      String   // JSON string containing field definitions
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  productOptionSets ProductOptionSet[]
  
  // Add indexes for performance
  @@index([isActive])
  @@index([createdAt])
  @@index([name])
  @@map("option_sets")
}

model ProductOptionSet {
  id           String   @id @default(cuid())
  productId    String   // Shopify product ID
  productTitle String?  // Cache product title for display
  productHandle String? // Cache product handle
  optionSetId  String
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  optionSet OptionSet @relation(fields: [optionSetId], references: [id], onDelete: Cascade)
  
  // Ensure unique product-optionset combination
  @@unique([productId, optionSetId])
  
  // Critical indexes for performance optimization
  @@index([productId]) // Most important - frequently queried
  @@index([productId, isActive]) // Composite index for active product queries
  @@index([optionSetId])
  @@index([isActive])
  @@index([createdAt])
  @@index([productHandle]) // For handle-based lookups
  @@map("product_option_sets")
}

model CustomerPersonalization {
  id           String   @id @default(cuid())
  productId    String
  optionSetId  String
  customerData String?  // JSON string containing customer input
  orderId      String?  // Link to Shopify order if applicable
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Add indexes for analytics and reporting
  @@index([productId])
  @@index([optionSetId])
  @@index([orderId])
  @@index([createdAt])
  @@index([productId, createdAt]) // Composite for product analytics
  @@map("customer_personalizations")
}

model Analytics {
  id                    String   @id @default(cuid())
  templateId            String
  productId             String
  customizationCount    Int      @default(0)
  conversionRate        Float    @default(0.0)
  averageOrderValue     Float    @default(0.0)
  date                  DateTime @default(now())
  
  // Add indexes for analytics queries
  @@index([templateId])
  @@index([productId])
  @@index([date])
  @@index([templateId, date]) // Composite for template analytics over time
  @@index([productId, date])  // Composite for product analytics over time
  @@map("analytics")
}

// New model for caching frequently accessed data
model CacheEntry {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String   // JSON string
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([key])
  @@index([expiresAt])
  @@map("cache_entries")
}

// New model for performance monitoring
model PerformanceLog {
  id          String   @id @default(cuid())
  endpoint    String
  method      String
  duration    Int      // Duration in milliseconds
  statusCode  Int
  userAgent   String?
  ipAddress   String?
  timestamp   DateTime @default(now())
  
  @@index([endpoint])
  @@index([timestamp])
  @@index([duration])
  @@map("performance_logs")
}